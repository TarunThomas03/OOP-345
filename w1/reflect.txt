I improved my knowledge of fundamental C++ ideas during this training and used them to improve the RideRequest class and the main function. In C++, I discovered linkage. In my code, there were two types. External Linkage: Shown by the RideRequest.cpp variable's g_taxrate and g_discount, which may be accessed from other source files thanks to their extern declaration. Internal Link: The purpose of the main.Internal linking is used in cpp as an example since it is restricted to the current translation unit, which aids with encapsulation. Static variables, like the counter in the RideRequest class' display function, are utilised throughout the entire programme and are shared by all instances of the class. For keeping shared data, they are helpful.
The Rule of Three was put into practise by developing unique copy constructor and copy assignment operator methods to manage m_rideInfo's dynamic memory.
Enhancing Input/Output: The class displays tax and discount calculations in addition to reading ride request data from an input stream. The RideRequest class's Rule of Three implementation, proper memory management during object duplication, and handling dynamic memory allocation were issues for me. But after a few hours, I was able to get beyond this obstacle. In conclusion, this training helped me better understand fundamental C++ ideas like linkage, static variables, and the Rule of Three. For the most part, this course moved quickly.


